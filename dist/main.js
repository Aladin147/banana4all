(()=>{var e={62:e=>{"use strict";e.exports=require("photoshop")},210:(e,t,a)=>{const{app:o,core:n}=a(62);class r{static async hasActiveSelection(){try{return void 0!==await n.executeAsModal(async()=>{const e=a(62).action.batchPlay;return(await e([{_obj:"get",_target:{_ref:"document",_enum:"ordinal",_value:"targetEnum"}}],{}))[0].selection})}catch{return!1}}static async getSelectionBounds(){if(!await this.hasActiveSelection())return null;try{const e=await n.executeAsModal(async()=>{const e=a(62).action.batchPlay;return(await e([{_obj:"get",_target:{_ref:"document",_enum:"ordinal",_value:"targetEnum"}}],{}))[0].selection});return{left:e.left._value,top:e.top._value,right:e.right._value,bottom:e.bottom._value,width:e.right._value-e.left._value,height:e.bottom._value-e.top._value}}catch(e){return console.error("Error getting selection bounds:",e),null}}static async createImageLayer(e,t="AI Generated",r=null){return await n.executeAsModal(async()=>{const n=o.activeDocument,i=a(897).storage.localFileSystem,l=a(62).action.batchPlay;try{const a=await i.getDataFolder(),o=await a.createFile(`temp_${Date.now()}.png`,{overwrite:!0}),s=await e.arrayBuffer(),c=new Uint8Array(s);await o.write(c);const u={_obj:"placeEvent",null:{_path:i.createSessionToken(await i.getEntryWithUrl(o.nativePath)),_kind:"local"},freeTransformCenterState:{_enum:"quadCenterState",_value:"QCSAverage"},_options:{dialogOptions:"dontDisplay"}};return r&&(u.offset={_obj:"offset",horizontal:{_unit:"pixelsUnit",_value:r.x||0},vertical:{_unit:"pixelsUnit",_value:r.y||0}}),await l([u],{synchronousExecution:!1,modalBehavior:"wait"}),n.activeLayers&&n.activeLayers.length>0&&(n.activeLayers[0].name=t),await new Promise(e=>setTimeout(e,1e3)),await o.delete(),n.activeLayers[0]}catch(e){throw console.error("Error placing image:",e),e}})}static async exportSelectionAsImage(){if(!await this.hasActiveSelection())throw new Error("No active selection to export");return await n.executeAsModal(async()=>{const e=a(897).storage.localFileSystem,t=await e.getTemporaryFolder(),o=await t.createFile("selection_export.png",{overwrite:!0}),n=a(62).action.batchPlay;await n([{_obj:"copy"}],{});const r=await this.getSelectionBounds();await n([{_obj:"make",_target:{_ref:"document"},width:{_unit:"pixelsUnit",_value:r.width},height:{_unit:"pixelsUnit",_value:r.height},resolution:{_unit:"densityUnit",_value:72},mode:{_enum:"colorMode",_value:"RGBColorMode"},initialFill:{_enum:"fill",_value:"transparent"}}],{}),await n([{_obj:"paste"}],{}),await n([{_obj:"exportSelectionAsFileTypePressed",_target:{_ref:"document",_enum:"ordinal",_value:"targetEnum"},fileType:{_enum:"fileType",_value:"PNG"},filePath:o.nativePath}],{}),await n([{_obj:"close"}],{});const i=await o.read();return new Blob([i],{type:"image/png"})})}static async createMaskFromSelection(){if(!await this.hasActiveSelection())throw new Error("No active selection to create mask from");return await n.executeAsModal(async()=>{const e=a(897).storage.localFileSystem,t=await e.getTemporaryFolder(),o=await t.createFile("mask_export.png",{overwrite:!0}),n=a(62).action.batchPlay,r=await this.getSelectionBounds();await n([{_obj:"make",_target:{_ref:"document"},width:{_unit:"pixelsUnit",_value:r.width},height:{_unit:"pixelsUnit",_value:r.height},resolution:{_unit:"densityUnit",_value:72},mode:{_enum:"colorMode",_value:"grayscaleMode"},initialFill:{_enum:"fill",_value:"black"}}],{}),await n([{_obj:"fill",using:{_enum:"fillContents",_value:"white"},mode:{_enum:"blendMode",_value:"normal"},opacity:{_unit:"percentUnit",_value:100}}],{}),await n([{_obj:"exportSelectionAsFileTypePressed",_target:{_ref:"document",_enum:"ordinal",_value:"targetEnum"},fileType:{_enum:"fileType",_value:"PNG"},filePath:o.nativePath}],{}),await n([{_obj:"close"}],{});const i=await o.read();return new Blob([i],{type:"image/png"})})}static async downloadImageAsBlob(e){const t=await fetch(e);if(!t.ok)throw new Error(`Failed to download image: ${t.status} ${t.statusText}`);return await t.blob()}static async showProgress(e){console.log(`[Banana4All] ${e}`)}}e.exports?e.exports=r:window.PhotoshopUtils=r},897:e=>{"use strict";e.exports=require("uxp")}},t={};function a(o){var n=t[o];if(void 0!==n)return n.exports;var r=t[o]={exports:{}};return e[o](r,r.exports,a),r.exports}const{app:o}=a(62),n=a(210);class r{constructor(e,t="http://localhost:3000",a="openrouter",o=null){this.apiKey=e,this.proxyUrl=t,this.provider=a,this.model=o}async generateImage(e){const t=await fetch(`${this.proxyUrl}/api/generate`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({apiKey:this.apiKey,model:this.model,prompt:e,provider:this.provider})});if(!t.ok){let e="Unknown error";try{const a=await t.json();e=a.error&&"object"==typeof a.error?a.error.message||JSON.stringify(a.error):a.error||a.message||"Unknown error",console.error("Proxy error:",a)}catch(a){e=`HTTP ${t.status}: ${t.statusText}`}throw new Error(`${e}`)}const a=await t.json();if(a.candidates&&a.candidates[0]?.content?.parts)for(const t of a.candidates[0].content.parts)if(t.inline_data||t.inlineData){const a=t.inline_data||t.inlineData,o=a.data,n=a.mime_type||a.mimeType||"image/jpeg",r=atob(o),i=new Uint8Array(r.length);for(let e=0;e<r.length;e++)i[e]=r.charCodeAt(e);return{imageBlob:new Blob([i],{type:n}),prompt:e}}throw new Error("No image data returned from API")}async checkProxyHealth(){try{const e=new AbortController,t=setTimeout(()=>e.abort(),2e3),a=await fetch(`${this.proxyUrl}/health`,{method:"GET",signal:e.signal});return clearTimeout(t),a.ok}catch(e){return!1}}}document.addEventListener("DOMContentLoaded",()=>{const e=document.getElementById("apiKey"),t=document.getElementById("prompt"),a=document.getElementById("generate"),i=localStorage.getItem("banana4all_api_key");i&&(e.value=i);const l=()=>{const t=e.value?e.value.trim():"";t&&(localStorage.setItem("banana4all_api_key",t),console.log("API key saved"))};e.addEventListener("change",l),e.addEventListener("input",l),a.addEventListener("click",async()=>{const i=e.value?e.value.trim():"",l=t.value?t.value.trim():"";if(console.log("Generate clicked"),console.log("API Key length:",i.length),console.log("Prompt:",l),i&&l)if(o.activeDocument)try{a.disabled=!0,a.innerHTML='<span class="btn-icon">⏳</span> Generating...';const e=new r(i,"http://localhost:3000","openrouter","google/gemini-2.5-flash-image");if(!await e.checkProxyHealth())throw new Error("Proxy server not running. Start it with: cd proxy-server && npm start");const t=`AI: ${l.substring(0,30)}`;console.log("Generating image with prompt:",l);const o=await e.generateImage(l);console.log("Creating layer with image blob, size:",o.imageBlob.size),await n.createImageLayer(o.imageBlob,t)}catch(e){console.error("Generation error:",e);let t=e.message;t.includes("API key")||t.includes("API_KEY_INVALID")?t="Invalid API key. Please check your OpenRouter API key.":t.includes("quota")||t.includes("RESOURCE_EXHAUSTED")?t="API quota exceeded. Please check your billing.":(t.includes("SAFETY")||t.includes("blocked"))&&(t="Content blocked by safety filters. Please modify your prompt."),await o.showAlert(`Error: ${t}`)}finally{a.disabled=!1,a.innerHTML='<span class="btn-icon">✨</span> Generate'}else await o.showAlert("Please open a document first.");else await o.showAlert("Please enter your OpenRouter API key and a prompt.")})})})();